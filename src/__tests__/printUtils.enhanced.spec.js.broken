import { describe, it, expect, vi } from 'vitest'
import { generatePrintHtml } from '../printUtils.js'

// Minimal mock for generateBubbleHtml
function generateBubbleHtml(count, isStructure) {
  if (!count || count <= 0) return '<span class="placeholder-text-inline italic text-text-muted text-xs pl-1">N/A</span>';
  let html = '';
  for (let n = 1; n <= count; n++) {
    html += `<span class="bubble"${isStructure ? ' data-struct="1"' : ''}></span>`;
  }
  return html;
}

// Format trait function
function formatPrintTrait(traitName) {
  return `${traitName}: Description for ${traitName}`
}

// Mock game rules data
const mockGameRules = {
  traitDefinitions: {
    'Infantry': 'Units with this trait do not receive orders normally',
    'Close Support': 'If an HE-V of class light or larger performs an Engage or Smash order',
    'Ultra-Light': 'Units with this Trait receive a +2 on Defense Rolls',
    'Squadron': 'Squadrons move and attack as one'
  },
  weapons: [],
  UL_HEV_WEAPONS: [
    {
      name: 'Light Machine Gun',
      damage: 2,
      range: 12
    },
    {
      name: 'Micro Missile Pod',
      damage: 3,
      range: 18,
      traits: ['Limited(1)']
    }
  ],
  UL_HEV_UPGRADE_PODS: [
    {
      name: 'Scramblers',
      effect: 'Blocks enemy targeting'
    },
    {
      name: 'Target Designator',
      effect: 'Allows friendly units to target enemies'
    }
  ]
}

describe('PrintUtils Enhanced Tests', () => {
  // Test card generation for different HE-V classes
  it('generates correct card layout for each HE-V class', () => {
    const classes = [
      { name: 'Light', baseArmor: 6, baseStructure: 4, defenseRoll: '3+', special: "Roll 1D6 for each point of Structure Damage" },
      { name: 'Medium', baseArmor: 8, baseStructure: 6, defenseRoll: '4+' },
      { name: 'Heavy', baseArmor: 10, baseStructure: 8, defenseRoll: '5+' },
      { name: 'Ultra-Heavy', baseArmor: 12, baseStructure: 10, defenseRoll: '6+', special: "Rolls 1D6 for each point of Structure Damage" }
    ];

    classes.forEach(classData => {
      const unit = {
        unitName: `Test ${classData.name}`,
        selectedClass: classData,
        selectedMotiveType: { name: 'Biped' },
        selectedWeapons: [],
        selectedUpgrades: [],
        effectiveArmor: classData.baseArmor,
        effectiveStructure: classData.baseStructure,
      }

      const html = generatePrintHtml({
        roster: [unit],
        rosterName: 'Test Roster',
        totalRosterBaseTonnage: 30, // Not important for this test
        getBaseTonnage: () => 30,
        generateBubbleHtml,
        formatPrintTrait,
        gameRulesData: mockGameRules,
      })

      // Check class-specific elements
      expect(html).toContain(classData.name)
      expect(html).toContain(classData.defenseRoll)

      // Special rules for Light and Ultra-Heavy
      if (classData.name === 'Light' || classData.name === 'Ultra-Heavy') {
        // Check if special rule is included in the card
        expect(html).toContain(classData.special)
      }
    })
  })

  // Test Ultra-Light HE-V squadron print layout
  it('correctly formats Ultra-Light HE-V squadron', () => {
    const ultraLightSquad = {
      unitName: 'Recon Squadron',
      type: 'Ultra-Light HE-V Squadron',
      isSupportAsset: true,
      details: [
        '<strong>Traits:</strong> Ultra-Light, Squadron(4)',
        '<strong>Upgrade Pods:</strong> Scramblers',
        '<strong>Weapons:</strong> Light Machine Gun'
      ],
      totalUnitTonnage: 5
    }

    const html = generatePrintHtml({
      roster: [ultraLightSquad],
      rosterName: 'Test Roster',
      totalRosterBaseTonnage: 5,
      getBaseTonnage: () => 5,
      generateBubbleHtml,
      formatPrintTrait,
      gameRulesData: mockGameRules
    })

    // Check for special Ultra-Light squadron formatting
    expect(html).toContain('Ultra-Light HE-V Squadron')
    expect(html).toContain('Upgrade Pods')
    expect(html).toContain('Scramblers')
    expect(html).toContain('Light Machine Gun')

    // Check if upgrade pods are in a separate section
    const upgradeSection = html.includes('<div class="upgrade-pods-section"') ||
                          html.includes('<div class="print-upgrades"')
    expect(upgradeSection).toBe(true)
  })

  // Test support asset trait formatting
  it('formats support asset traits correctly', () => {
    const supportAsset = {
      type: 'Forward Observer',
      isSupportAsset: true,
      details: [
        '<strong>Traits:</strong> Infantry, Close Support',
      ],
      totalUnitTonnage: 5
    }

    const html = generatePrintHtml({
      roster: [supportAsset],
      rosterName: 'Test Roster',
      totalRosterBaseTonnage: 5,
      getBaseTonnage: () => 5,
      generateBubbleHtml,
      formatPrintTrait,
      gameRulesData: mockGameRules
    })

    // Check traits are formatted according to formatPrintTrait function
    expect(html).toContain('Infantry: Description for Infantry')
    expect(html).toContain('Close Support: Description for Close Support')
  })

  // Test mixed roster print output
  it('correctly formats a mixed roster with different unit types', () => {
    const mixedRoster = [
      {
        unitName: 'Heavy Tank',
        selectedClass: {
          name: 'Heavy',
          baseArmor: 10,
          baseStructure: 8,
          defenseRoll: '5+'
        },
        selectedMotiveType: { name: 'Tracked' },
        selectedWeapons: [
          { name: 'Auto-Cannon', damage: 3, range: 24 }
        ],
        selectedUpgrades: [],
        effectiveArmor: 10,
        effectiveStructure: 8
      },
      {
        type: 'Artillery Support',
        isSupportAsset: true,
        details: [
          '<strong>Damage:</strong> 5',
          '<strong>Range:</strong> 36"',
          '<strong>Traits:</strong> Blast(3)'
        ],
        totalUnitTonnage: 15
      }
    ]

    const html = generatePrintHtml({
      roster: mixedRoster,
      rosterName: 'Mixed Roster',
      totalRosterBaseTonnage: 55, // 40 + 15
      getBaseTonnage: (unit) => unit.isSupportAsset ? unit.totalUnitTonnage : 40,
      generateBubbleHtml,
      formatPrintTrait,
      gameRulesData: mockGameRules
    })

    // Check for both types of units in the output
    expect(html).toContain('Heavy Tank')
    expect(html).toContain('Artillery Support')
    expect(html).toContain('55T Total') // Total tonnage should be included
  })

  it('applies proper styling to different types of support assets', () => {
    const supportAssets = [
      {
        type: 'Artillery Barrage',
        isSupportAsset: true,
        details: [
          '<strong>Damage:</strong> 4',
          '<strong>Traits:</strong> Blast(3)'
        ],
        totalUnitTonnage: 10
      },
      {
        type: 'Forward Observer',
        isSupportAsset: true,
        details: [
          '<strong>Traits:</strong> Infantry'
        ],
        totalUnitTonnage: 5
      }
    ]

    supportAssets.forEach(asset => {
      const html = generatePrintHtml({
        roster: [asset],
        rosterName: 'Support Test',
        totalRosterBaseTonnage: asset.totalUnitTonnage,
        getBaseTonnage: () => asset.totalUnitTonnage,
        generateBubbleHtml,
        formatPrintTrait,
        gameRulesData: mockGameRules
      })

      // Check for support-asset-specific CSS class
      expect(html).toContain('support-asset-card')

      // Check that support asset doesn't show tonnage display
      const hasTonnageDisplay = html.includes('unit-tonnage')
      expect(hasTonnageDisplay).toBe(false)

      // Verify asset type is displayed
      expect(html).toContain(asset.type)
    })
  })
})
